import java.sql.*;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;

/**GUI que permite crear una cuenta de tipo médico
 *
 * @author a-carrasquillo
 */
public class Create_Account_Med extends javax.swing.JFrame {
    // data fields
    private List<String> id_fac;
    private List<String> id_e;
    // constantes relacionadas a la base de datos
    private final String YOURPASSWORD = "YourPassWord";
    private final String DBUSER = "dbuser";
    
    /**Constructor por defecto
     * Crea un nuevo formulario Create_Account_Med
     */
    public Create_Account_Med() {
        initComponents();
        this.setLocationRelativeTo(null);
        // elimina el mensaje de error por defecto
        error.setText("");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        domingo = new java.awt.Checkbox();
        lunes = new java.awt.Checkbox();
        name = new java.awt.TextField();
        jLabel1 = new javax.swing.JLabel();
        martes = new java.awt.Checkbox();
        jLabel2 = new javax.swing.JLabel();
        apellidos = new java.awt.TextField();
        miercoles = new java.awt.Checkbox();
        jLabel3 = new javax.swing.JLabel();
        pass = new javax.swing.JPasswordField();
        jueves = new java.awt.Checkbox();
        pass_conf = new javax.swing.JPasswordField();
        viernes = new java.awt.Checkbox();
        id_med = new java.awt.TextField();
        sabado = new java.awt.Checkbox();
        get_id_med = new java.awt.Button();
        submit = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        hora_entrada = new javax.swing.JComboBox<>();
        hora_salida = new javax.swing.JComboBox<>();
        jLabel11 = new javax.swing.JLabel();
        especialidad = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        hospital = new java.awt.Checkbox();
        oficina = new java.awt.Checkbox();
        nombre_facilidad = new javax.swing.JComboBox<>();
        error = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Registro del Doctor");

        domingo.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        domingo.setLabel("Domingo");

        lunes.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        lunes.setLabel("Lunes");

        name.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N

        jLabel1.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel1.setText("Nombre:");

        martes.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        martes.setLabel("Martes");

        jLabel2.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel2.setText("Apellidos:");

        apellidos.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N

        miercoles.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        miercoles.setLabel("Miércoles");

        jLabel3.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel3.setText("Contraseña:");

        pass.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N

        jueves.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jueves.setLabel("Jueves");

        pass_conf.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N

        viernes.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        viernes.setLabel("Viernes");

        id_med.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N

        sabado.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        sabado.setLabel("Sábado");

        get_id_med.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        get_id_med.setLabel("Obtener ID");
        get_id_med.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                get_id_medActionPerformed(evt);
            }
        });

        submit.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        submit.setText("Registrarse");
        submit.setMaximumSize(new java.awt.Dimension(163, 31));
        submit.setMinimumSize(new java.awt.Dimension(163, 31));
        submit.setPreferredSize(new java.awt.Dimension(163, 31));
        submit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel4.setText("Confirmar Contraseña:");

        jLabel5.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel5.setText("ID Médico:");

        jLabel7.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel7.setText("Hora de Entrada:");

        jLabel8.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel8.setText("Hora de Salida:");

        jLabel9.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel9.setText("Días de Trabajo: ");

        hora_entrada.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        hora_entrada.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Hora" }));
        hora_entrada.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                hora_entradaMouseClicked(evt);
            }
        });

        hora_salida.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        hora_salida.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Hora" }));

        jLabel11.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel11.setText("Especialidad:");

        especialidad.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        especialidad.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item " }));

        jLabel6.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel6.setText("Nombre Facilidad:");

        jLabel12.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel12.setText("Tipo de Facilidad:");

        hospital.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        hospital.setLabel("Hospital");
        hospital.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                hospitalMouseClicked(evt);
            }
        });

        oficina.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        oficina.setLabel("Oficina Médica");
        oficina.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                oficinaMouseClicked(evt);
            }
        });

        nombre_facilidad.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        nombre_facilidad.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione Primero un Tipo de Instalación" }));

        error.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        error.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        error.setText("Mensaje de Error");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(error, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(hora_entrada, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(nombre_facilidad, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(apellidos, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(pass, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(id_med, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(get_id_med, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(pass_conf, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel11)
                            .addComponent(jLabel12))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(hospital, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(oficina, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(especialidad, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel9)
                            .addComponent(jLabel8))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(hora_salida, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(domingo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(miercoles, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(sabado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(32, 32, 32)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lunes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jueves, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(viernes, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(martes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(submit, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                .addGap(175, 175, 175)))))
                .addGap(36, 36, 36))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel1))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(apellidos, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(pass, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(pass_conf, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(get_id_med, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING)))
                            .addComponent(id_med, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(especialidad, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(oficina, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(jLabel12))))
                    .addComponent(hospital, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nombre_facilidad, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hora_entrada, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hora_salida, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9)
                    .addComponent(martes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lunes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(domingo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(miercoles, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jueves, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(viernes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sabado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(submit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(error, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel11.getAccessibleContext().setAccessibleName("especialidad_label");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void submitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitActionPerformed
        // elimina el mensaje de error
        error.setText("");
        
        // recuperar los valores de los campos
        String nombre = name.getText();
        String apellido = apellidos.getText();
        String password = String.valueOf(pass.getPassword());
        String conf_password = String.valueOf(pass_conf.getPassword());
        String idMedico = id_med.getText();
        String entrada = String.valueOf(hora_entrada.getSelectedItem());
        String salida = String.valueOf(hora_salida.getSelectedItem());
        
        // variable para almacenar los días de trabajo
        String dias_trabajo = "";
        // verificar los días escogidos
        if(domingo.getState())
            dias_trabajo = "Domingo";
        if(lunes.getState()&&dias_trabajo.isEmpty())
            dias_trabajo = dias_trabajo + "Lunes";
        else if(lunes.getState()&&!dias_trabajo.isEmpty())
            dias_trabajo = dias_trabajo + ", Lunes";
        if(martes.getState()&&dias_trabajo.isEmpty())
            dias_trabajo = dias_trabajo + "Martes";
        else if(martes.getState()&&!dias_trabajo.isEmpty())
            dias_trabajo = dias_trabajo + ", Martes";   
        if(miercoles.getState()&&dias_trabajo.isEmpty())
            dias_trabajo = dias_trabajo + "Miercoles";
        else if(miercoles.getState()&&!dias_trabajo.isEmpty())
            dias_trabajo = dias_trabajo + ", Miercoles";
        if(jueves.getState()&&dias_trabajo.isEmpty())
            dias_trabajo = dias_trabajo + "Jueves";
        else if(jueves.getState()&&!dias_trabajo.isEmpty())
             dias_trabajo = dias_trabajo + ", Jueves";
        if(viernes.getState()&&dias_trabajo.isEmpty())
            dias_trabajo = dias_trabajo + "Viernes";
        else if(viernes.getState()&&!dias_trabajo.isEmpty())
            dias_trabajo = dias_trabajo + ", Viernes";
        if(sabado.getState()&&dias_trabajo.isEmpty())
            dias_trabajo = dias_trabajo + "Sabado";
        else if(sabado.getState()&&!dias_trabajo.isEmpty())
            dias_trabajo = dias_trabajo + ", Sabado";
        
        // verificar si las contraseñas no son iguales o están vacías
        if(!password.equals(conf_password)||password.isEmpty())
        {
            JOptionPane.showMessageDialog(null,"Error! Las contraseñas no son iguales o están vacías.");
        }
        else
        {
            Connection coneccion = null;
            PreparedStatement p_statement = null;
            Connection coneccion2 = null;
            PreparedStatement p_statement2 = null;
            // verificar si dejo algo en blanco
            if(nombre.isEmpty()||apellido.isEmpty()|| idMedico.isEmpty()||entrada.isEmpty()||salida.isEmpty()||dias_trabajo.isEmpty())
            {
                error.setText("Favor de no dejar espacios en blanco!");
            }
            else
            {
                try
                {
                    coneccion = DriverManager.getConnection("jdbc:mysql://localhost:3306/MedExpress?autoReconnect=true&useSSL=false",DBUSER,YOURPASSWORD);
                    // query que crea la cuenta del médico al realizar la inserciónen la tabla de medicos
                    String query = "insert into medicos values('"+idMedico+"', '"+password+"', '"+ nombre+"', '" +apellido+ "', '" +id_e.get(especialidad.getSelectedIndex())+ "')";
                    p_statement = coneccion.prepareStatement(query);
                   
                    coneccion2 = DriverManager.getConnection("jdbc:mysql://localhost:3306/MedExpress?autoReconnect=true&useSSL=false",DBUSER,YOURPASSWORD);
                    // query que relaciona al médico con su lugar de trabajo
                    String query2 = "insert into trabaja values('"+idMedico+"', '"+id_fac.get(nombre_facilidad.getSelectedIndex())+"', '"+ entrada+"', '"+ salida + "', '" + dias_trabajo + "')";
                    p_statement2 = coneccion2.prepareStatement(query2);
                   
                    // realizar las inserciones
                    if((p_statement.executeUpdate()>=0) && (p_statement2.executeUpdate()>=0))
                    {
                        JOptionPane.showMessageDialog(null, "Información Transferida Correctamente.");
                        JOptionPane.showMessageDialog(null, "Inicie sesión para tener acceso.");
                        // cerrar el GUI actual
                        dispose();
                        // crear una instancia del GUI de inicio de sesión de los médicos
                        LogDoctor login= new  LogDoctor();
                        // hacer visible el GUI nuevo
                        login.setVisible(true);
                    }
                }catch(SQLException e)
                {
                    /*blank intentionally*/
                }
                finally
                {
                    try
                    {
                        if(p_statement != null)
                            p_statement.close();
                        if(p_statement2 != null)
                            p_statement2.close();
                        if(coneccion != null)
                            coneccion.close();
                        if(coneccion2 != null)
                            coneccion2.close();
                    } catch(SQLException e) 
                    {
                        /*blank intentionally*/
                    }
                }
            }
        }
    }//GEN-LAST:event_submitActionPerformed

    private void get_id_medActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_get_id_medActionPerformed
        // Primero definimos la variable entera para almacenar el número de identificación.
        int id_m;
        // Ahora podemos realizar el generador aleatorio
        id_m = (int)(Math.random()*((999-002)+1))+002;
        // Por último, pasaremos el valor del id generado al encasillado designado para ese propósito
        id_med.setText("M-"+String.valueOf(id_m));
    
        // remover las objetos por defecto del encasillado de especialidad
        especialidad.removeAllItems();
        // crear instancia de ArrayList para almacenar los números de identificación de las especialidades
        id_e = new ArrayList<>();
        
        Connection coneccion = null;
        try
        {
            coneccion = DriverManager.getConnection("jdbc:mysql://localhost:3306/MedExpress?autoReconnect=true&useSSL=false",DBUSER,YOURPASSWORD);
            // query para extraer las especialidades y su respectivo número de identificación
            String query = "select Especialidad, ID_especialidad from MedExpress.Especialidades";
            Statement statement = coneccion.createStatement();
            ResultSet result = statement.executeQuery(query);
            
            // extraer los resultados 
            while(result.next())
            {
                especialidad.addItem(result.getString(1));
                id_e.add(result.getString(2));
            }

            try{result.close();}catch(SQLException e){ /*blank intentionally*/}
            try{statement.close();}catch(SQLException e) {/*blank intentionally*/}

        }catch(SQLException e)
        {
            /*blank intentionally*/
        }
        finally
        {
            try{
                if(coneccion != null)
                    coneccion.close();
            } catch(SQLException e)
            {
                /*blank intentionally*/
            }
        } 
    }//GEN-LAST:event_get_id_medActionPerformed

    private void hospitalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_hospitalMouseClicked
        // eliminar los objetos en los horarios de entrada y salida
        hora_entrada.removeAllItems();
        hora_salida.removeAllItems();
        
        // al marcar el encasillado de hospital, si el encasillado de oficina esta seleccionado
        // se desmarcará automáticamente
        if(oficina.getState())
            oficina.setState(false);
        
        // variable para guardar la hora con su formato establecido
        String hora;

        // llenar los encasillados de hora de entrada y hora de salida con las horas
        for (int i = 1; i<=24;i++)
        {
            hora = i + ":00:00";
            hora_entrada.addItem(hora);
            hora_salida.addItem(hora);
        }
        
        // remover todos los nombres de las facilidades
        nombre_facilidad.removeAllItems();
        // crear nueva instancia del ArrayList para almacenar los números de identificación de las facilidades
        id_fac = new ArrayList<>();
        
        Connection coneccion = null;
        try
        {
            coneccion = DriverManager.getConnection("jdbc:mysql://localhost:3306/MedExpress?autoReconnect=true&useSSL=false",DBUSER,YOURPASSWORD);
            // query para traer los nombres y los números de identificación de los hospitales
            String query = "select Nombre, ID_Facilidad from MedExpress.Hospitales";
            Statement statement = coneccion.createStatement();
            ResultSet result = statement.executeQuery(query);

            // extraer los resultados
            while(result.next())
            {
                nombre_facilidad.addItem(result.getString(1));
                id_fac.add(result.getString(2));
            }
            try{result.close();}catch(SQLException e){ /*blank intentionally*/}
            try{statement.close();}catch(SQLException e) {/*blank intentionally*/}
        }catch(SQLException e)
        {
            /*blank intentionally*/
        }
        finally
        {
            try{
                 if(coneccion != null)
                     coneccion.close();
             } catch(SQLException e)
             {
                 /*blank intentionally*/
             }
        }
    }//GEN-LAST:event_hospitalMouseClicked

    private void oficinaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_oficinaMouseClicked
        // eliminar los objetos en los horarios de entrada y salida
        hora_entrada.removeAllItems();
        hora_salida.removeAllItems();
        
        // al marcar el encasillado de oficina, si el encasillado de hospital esta seleccionado
        // se desmarcará automáticamente
        if(hospital.getState())
            hospital.setState(false);
        
        // variable para guardar la hora con su formato establecido
        String hora;

        // llenar los encasillados de hora de entrada y hora de salida con las horas
        for (int i = 8; i<=17;i++)
        {
            hora = i + ":00:00";
            hora_entrada.addItem(hora);
            hora_salida.addItem(hora);
        }
        
        // remover todos los nombres de las facilidades
        nombre_facilidad.removeAllItems();
        // crear nueva instancia del ArrayList para almacenar los números de identificación de las facilidades
        id_fac = new ArrayList<>();
        
        Connection coneccion = null;
        try
        {
            coneccion = DriverManager.getConnection("jdbc:mysql://localhost:3306/MedExpress?autoReconnect=true&useSSL=false",DBUSER,YOURPASSWORD);
            // query para traer los nombres y los números de identificación de las oficinas médicas
            String query = "select Nombre, ID_Facilidad from MedExpress.Oficinas_Medicas";
            Statement statement = coneccion.createStatement();
            ResultSet result = statement.executeQuery(query);
            
            // extraer los resultados
            while(result.next())
            {
                nombre_facilidad.addItem(result.getString(1));
                id_fac.add(result.getString(2));
            }       
            try{result.close();}catch(SQLException e){ /*blank intentionally*/}
            try{statement.close();}catch(SQLException e) {/*blank intentionally*/}
        }catch(SQLException e)
        {
            /*blank intentionally*/
        }
        finally
        {
            try{
                if(coneccion != null)
                    coneccion.close();
            } catch(SQLException e)
            {
                /*blank intentionally*/
            }
        }
    }//GEN-LAST:event_oficinaMouseClicked

    private void hora_entradaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_hora_entradaMouseClicked
       // determinar la hora que se seleccionó como hora de entrada
        String hora = String.valueOf(hora_entrada.getSelectedItem());
        // remover la hora de entrada de la hora de salida
        hora_salida.removeItem(hora);
    }//GEN-LAST:event_hora_entradaMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Create_Account_Med.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Create_Account_Med.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Create_Account_Med.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);} catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Create_Account_Med.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Create_Account_Med().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.TextField apellidos;
    private java.awt.Checkbox domingo;
    private javax.swing.JLabel error;
    private javax.swing.JComboBox<String> especialidad;
    private java.awt.Button get_id_med;
    private javax.swing.JComboBox<String> hora_entrada;
    private javax.swing.JComboBox<String> hora_salida;
    private java.awt.Checkbox hospital;
    private java.awt.TextField id_med;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private java.awt.Checkbox jueves;
    private java.awt.Checkbox lunes;
    private java.awt.Checkbox martes;
    private java.awt.Checkbox miercoles;
    private java.awt.TextField name;
    protected javax.swing.JComboBox<String> nombre_facilidad;
    private java.awt.Checkbox oficina;
    private javax.swing.JPasswordField pass;
    private javax.swing.JPasswordField pass_conf;
    private java.awt.Checkbox sabado;
    private javax.swing.JButton submit;
    private java.awt.Checkbox viernes;
    // End of variables declaration//GEN-END:variables
}
