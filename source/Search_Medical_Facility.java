import java.sql.*;
import javax.swing.*;
import java.util.*;

/** GUI utilizado para buscar información de las facilidades médicas.
 *   Además nos permite enviar la información del paciente a la facilidad
 *   médica de su elección.
 *
 * @author a-carrasquillo
 * @author arivesan
 */
public class Search_Medical_Facility extends javax.swing.JFrame {
    // data fields  
    private List<String> id_fac;
    private List<String> id_medico;
    private String id_paciente;
    private String id_facilidad;
    private Patient_Info info;
    // constantes relacionadas a la base de datos
    private final String YOURPASSWORD = "YourPassWord";
    private final String DBUSER = "dbuser";
    
    /**Constructor por defecto
     * Crea un nuevo formulario Search_Medical_Facility
     */
    public Search_Medical_Facility() {
        initComponents();
        this.setLocationRelativeTo(null);
    }
    
    /**Constructor especial 1
     * 
     * @param id_paciente - número de identificación del paciente
     */
    public Search_Medical_Facility(String id_paciente) {
        initComponents();
        this.setLocationRelativeTo(null);
        this.id_paciente = id_paciente;
    }
    
    /**Constructor especial 2
     * 
     * @param id_paciente - número de identificación del paciente
     * @param info - objeto con la información básica del paciente
     */
    public Search_Medical_Facility(String id_paciente, Patient_Info info) {
        initComponents();
        this.setLocationRelativeTo(null);
        this.id_paciente = id_paciente;
        this.info = new Patient_Info(info);
    }
    
    //getter
    /**Método que nos permite recuperar el id del paciente
     * 
     * @return cadena de caracteres que representa el id del paciente
     */
    public String getIdPaciente() {
        return id_paciente;
    }
    
    //setter
    /**Método que nos permite modificar el id del paciente
     * 
     * @param id_paciente - número de identificación del paciente
     */
    public void setIdPaciente(String id_paciente) {
        this.id_paciente = id_paciente;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel11 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        hospital = new java.awt.Checkbox();
        oficina = new java.awt.Checkbox();
        nombre_facilidad = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        sendInfo = new javax.swing.JButton();
        hora_apertura = new javax.swing.JTextField();
        hora_cierre = new javax.swing.JTextField();
        cap_doc = new javax.swing.JTextField();
        num_tel = new javax.swing.JTextField();
        see_inf = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        planes_aceptados = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        dir_fisica = new javax.swing.JTextArea();
        see_rating = new javax.swing.JButton();
        close = new javax.swing.JButton();
        see_doctors = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        cap_est = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Buscar Instalación Médica");

        jLabel11.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel11.setText("Tipo de Facilidad:");

        jLabel6.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel6.setText("Nombre Facilidad:");

        hospital.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        hospital.setLabel("Hospital");
        hospital.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                hospitalMouseClicked(evt);
            }
        });

        oficina.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        oficina.setLabel("Oficina Médica");
        oficina.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                oficinaMouseClicked(evt);
            }
        });

        nombre_facilidad.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        nombre_facilidad.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione Primero un Tipo de Instalación" }));
        nombre_facilidad.setMaximumSize(new java.awt.Dimension(308, 28));

        jLabel2.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel2.setText("Horario Apertura:");

        jLabel3.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel3.setText("Horario Cierre:");

        jLabel4.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel4.setText("Planes Aceptados:");

        jLabel5.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel5.setText("Num. Teléfono:");

        jLabel7.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel7.setText("Cap. Doctores:");

        jLabel8.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel8.setText("Dirección Física:");

        sendInfo.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        sendInfo.setText("Enviar Información");
        sendInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendInfoActionPerformed(evt);
            }
        });

        hora_apertura.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        hora_apertura.setMaximumSize(new java.awt.Dimension(6, 28));

        hora_cierre.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N

        cap_doc.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N

        num_tel.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N

        see_inf.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        see_inf.setText("Ver Información");
        see_inf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                see_infActionPerformed(evt);
            }
        });

        planes_aceptados.setColumns(20);
        planes_aceptados.setRows(5);
        jScrollPane1.setViewportView(planes_aceptados);

        dir_fisica.setColumns(20);
        dir_fisica.setRows(5);
        jScrollPane2.setViewportView(dir_fisica);

        see_rating.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        see_rating.setText("Ver Reseña de la Facilidad");
        see_rating.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                see_ratingActionPerformed(evt);
            }
        });

        close.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        close.setText("Cerrar");
        close.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeActionPerformed(evt);
            }
        });

        see_doctors.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        see_doctors.setText("Doctores Disponibles");
        see_doctors.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                see_doctorsActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel9.setText("Cap. Estacionamiento:");

        cap_est.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(close)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addComponent(see_doctors)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addComponent(see_rating)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addComponent(sendInfo)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel11)
                                .addComponent(jLabel6)
                                .addComponent(jLabel2)
                                .addComponent(jLabel3))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(hospital, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(oficina, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(hora_apertura, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(nombre_facilidad, javax.swing.GroupLayout.PREFERRED_SIZE, 338, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(15, 15, 15)
                                        .addComponent(see_inf))
                                    .addComponent(hora_cierre, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 504, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel4)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 505, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel7)
                            .addComponent(jLabel5)
                            .addComponent(jLabel9)
                            .addComponent(jLabel8))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 505, Short.MAX_VALUE)
                            .addComponent(num_tel)
                            .addComponent(cap_doc)
                            .addComponent(cap_est))))
                .addGap(45, 45, 45))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel11)
                            .addComponent(hospital, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(15, 15, 15)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(nombre_facilidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(see_inf))
                        .addGap(15, 15, 15)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(hora_apertura, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(oficina, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(hora_cierre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(num_tel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cap_doc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cap_est, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(sendInfo)
                        .addComponent(see_rating))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(close)
                        .addComponent(see_doctors)))
                .addGap(25, 25, 25))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void hospitalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_hospitalMouseClicked
        // borrar los nombres de las facilidades
        nombre_facilidad.removeAllItems();
        
        // evalúa si el recuadro de oficina está seleccionado, de ser así,
        // se deseleccionará automáticamente al marcar el recuadro de hospital
        if(oficina.getState())
            oficina.setState(false);
        
        // crear instancia de ArrayList para almacenar los números de identificación de las facilidades
        id_fac = new ArrayList<>();
        
        Connection coneccion = null;
        try
        {
            coneccion = DriverManager.getConnection("jdbc:mysql://localhost:3306/MedExpress?autoReconnect=true&useSSL=false",DBUSER,YOURPASSWORD);
            // query para obtener el nombre y número de identificación de los hospitales
            String query = "select nombre, ID_facilidad from MedExpress.Hospitales";
            Statement statement = coneccion.createStatement();
            ResultSet result = statement.executeQuery(query);
            // comprobar  si hubo resultados
            while(result.next())
            {
                // añadir el nombre del hospital al recuadro de nombre de facilidades
                nombre_facilidad.addItem(result.getString(1));
                // añadir el id del hospital al ArrayList de id de facilidad
                id_fac.add(result.getString(2));
            }
            try{result.close();}catch(SQLException e){ /*blank intentionally*/}
            try{statement.close();}catch(SQLException e) {/*blank intentionally*/}
        }catch(SQLException e)
        {
            /*blank intentionally*/
        }
        finally
        {
            try
            {
                if(coneccion != null)
                    coneccion.close();
            } catch(SQLException e)
            {
                /*blank intentionally*/
            }
        }
    }//GEN-LAST:event_hospitalMouseClicked

    private void oficinaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_oficinaMouseClicked
        // borrar los nombres de las facilidades
        nombre_facilidad.removeAllItems();
        
        // evalúa si el recuadro de hospital está seleccionado, de ser así,
        // se deseleccionará automáticamente al marcar el recuadro de oficina
        if(hospital.getState())
            hospital.setState(false);
        
        // crear instancia de ArrayList para almacenar los números de identificación de las facilidades
        id_fac = new ArrayList<>();
        
        Connection coneccion = null;
        try
        {
            coneccion = DriverManager.getConnection("jdbc:mysql://localhost:3306/MedExpress?autoReconnect=true&useSSL=false",DBUSER,YOURPASSWORD);
            // query para obtener el nombre y número de identificación de las oficinas médicas
            String query = "select Nombre, ID_Facilidad from MedExpress.Oficinas_Medicas";
            Statement statement = coneccion.createStatement();
            ResultSet result = statement.executeQuery(query);
            // comprobar  si hubo resultados
            while(result.next())
            {
                // añadir el nombre de la oficina médica al recuadro de nombre de facilidades
                nombre_facilidad.addItem(result.getString(1));
                // añadir el id de la oficina médica al ArrayList de id de facilidad
                id_fac.add(result.getString(2));
            }
            try{result.close();}catch(SQLException e){ /*blank intentionally*/}
            try{statement.close();}catch(SQLException e) {/*blank intentionally*/}
        }catch(SQLException e)
        {
            /*blank intentionally*/
        }
        finally
        {
            try
            {
                if(coneccion != null)
                    coneccion.close();
            } catch(SQLException e)
            {
                /*blank intentionally*/
            }
        }
    }//GEN-LAST:event_oficinaMouseClicked

    private void see_infActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_see_infActionPerformed
        // obtener el id de la facilidad
        id_facilidad = id_fac.get(nombre_facilidad.getSelectedIndex());
        
        Connection coneccion = null;
        try
        {
            coneccion = DriverManager.getConnection("jdbc:mysql://localhost:3306/MedExpress?autoReconnect=true&useSSL=false",DBUSER,YOURPASSWORD);
            // variable para almacenar el tipo de facilidad
            String facilidad="";
            // evaluar que tipo de facilidad fue seleccionada, para saber en que tabla realizar la búsqueda
            if(hospital.getState())
                facilidad="Hospitales";
            else
                facilidad="Oficinas_Medicas";   
            // query para extraer la información básica de la facilidad médica
            String query = "Select Horario_Apertura, Horario_Cierre, Plan, Num_Tel, Cant_Doc, Cap_Est, Carretera_Calle, Pueblo, Estado, Zip_Code from " +facilidad+ " where ID_Facilidad = '"+ id_facilidad +"'";
            Statement statement = coneccion.createStatement();
            ResultSet result = statement.executeQuery(query);
            // comprobar si hubo resultado
            while(result.next())
            {
                // extraer la información del resultado
                String hora_open = result.getString("Horario_Apertura");
                String hora_close = result.getString("Horario_Cierre");
                String plan = result.getString("Plan");
                String numTel= result.getString("Num_Tel");
                String capDoc = result.getString("Cant_Doc");
                String capEst = result.getString("Cap_Est");
                String calle = result.getString("Carretera_Calle");
                String pueblo = result.getString("Pueblo");
                String estado = result.getString("Estado");
                String zipCode= result.getString("Zip_Code");       
                String address = calle + " " + pueblo + " " + estado + " " + zipCode; 
                // pasar la información a los encasillados adecuados en el GUI
                hora_apertura.setText(hora_open);
                hora_cierre.setText(hora_close);
                planes_aceptados.setText(plan);
                num_tel.setText(numTel);
                cap_doc.setText(capDoc);
                dir_fisica.setText(address);
                cap_est.setText(capEst);
            }
            try{result.close();}catch(SQLException e){ /*blank intentionally*/}
            try{statement.close();}catch(SQLException e) {/*blank intentionally*/}
        }catch(SQLException e)
        {
            /*blank intentionally*/
        }
        finally
        {
            try
            {
                if(coneccion != null)
                    coneccion.close();
            } catch(SQLException e)
            {
                /*blank intentionally*/
            }
        }
    }//GEN-LAST:event_see_infActionPerformed

    private void sendInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendInfoActionPerformed
        // generar un número aleatorio
        int id_I = (int) (Math.random()*((999-002)+1)) + 002;
        // utilizar el número aleatorio para formar un id de ingreso a la facilidad médica
        String id_ingre = ("I-" + String.valueOf(id_I));
       
       Connection coneccion = null;
       PreparedStatement p_statement = null;
       try
       {
           coneccion = DriverManager.getConnection("jdbc:mysql://localhost:3306/MedExpress?autoReconnect=true&useSSL=false",DBUSER,YOURPASSWORD);
           // query para realizar un ingreso de un paciente a una facilidad médica
           String query = "insert into ingresos values ('"+id_ingre+"', '"+id_paciente+"', '"+ id_facilidad+"', curtime(), curdate(), '"+info.getPreDiag()+"', 0)";
           p_statement = coneccion.prepareStatement(query);
           // realizar el ingreso
           if(p_statement.executeUpdate() >= 0)
           {
               JOptionPane.showMessageDialog(null, "La información ha sido enviada..." );
               // cerrar el GUI actual
               this.dispose();
               // crear una instancia del menú principal de los pacientes
               PatientUserForm paciente = new PatientUserForm(id_paciente);
               // hacer visible el nuevo GUI
               paciente.setVisible(true);
            }
       }catch(SQLException e)
       {
           /*blank intentionally*/
       }
       finally
       {
           try
           {
               if(p_statement != null)
                   p_statement.close();
               if(coneccion != null)
                   coneccion.close();
           } catch(SQLException e) 
           {
            /*blank intentionally*/
           }
       }
    }//GEN-LAST:event_sendInfoActionPerformed

    private void see_ratingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_see_ratingActionPerformed
        // crear una instancia del GUI que nos permite ver la lista de reseñas de una facilidad
        ratings_list listaRatings = new ratings_list();
        
        Connection coneccion = null;
        try
        {
            coneccion = DriverManager.getConnection("jdbc:mysql://localhost:3306/MedExpress?autoReconnect=true&useSSL=false",DBUSER,YOURPASSWORD);
            // query para extraer la información de las reseñas de una facilidad
            String query = "select fecha_comentario, hora_comentario, comentarios, rating_numerico from comentarios where ID_Med_OM_SE = '"+ id_facilidad+"'";
            Statement statement = coneccion.createStatement();
            ResultSet result = statement.executeQuery(query);

            // variables que almacenan la información de las reseñas
            String fecha, hora, comentario, rating_num;
            // movernos a través de los resultados
            while(result.next())
            {
                // extraer la información del resultado
                 fecha = result.getString("fecha_comentario");
                 hora =  result.getString("hora_comentario");
                 comentario = result.getString("comentarios");
                 rating_num =  result.getString("rating_numerico");
                // enviar la información a la tabla de reseñas
                listaRatings.model.addRow(new Object[]{fecha, hora, comentario, rating_num});
            }
            try{result.close();}catch(SQLException e){ /*blank intentionally*/}
            try{statement.close();}catch(SQLException e) {/*blank intentionally*/}
        }catch(SQLException e)
        {
            /*blank intentionally*/
        }
        finally
        {
            try
            {
                if(coneccion != null)
                    coneccion.close();
            } catch(SQLException e)
            {
                /*blank intentionally*/
            }
        }
        // hacer visible el GUI nuevo
        listaRatings.setVisible(true);
    }//GEN-LAST:event_see_ratingActionPerformed

    private void closeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeActionPerformed
        // cerrar el GUI actual
        this.dispose();
    }//GEN-LAST:event_closeActionPerformed

    private void see_doctorsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_see_doctorsActionPerformed
        // crear una instancia del GUI que nos muestra los médicos disponibles
        Medicos_Disponibles medicos = new Medicos_Disponibles();
        // crear instancia de ArrayList para almacenar el id de los médicos
        id_medico = new ArrayList<>();
        
        Connection coneccion = null;
        // variable para almacenar el día de la consulta
        String dia_consulta = " ";
        try
        {
            coneccion = DriverManager.getConnection("jdbc:mysql://localhost:3306/MedExpress?autoReconnect=true&useSSL=false",DBUSER,YOURPASSWORD);
            // query para obtener el día de la consulta
            String query = "select date_format(now(), '%W') dia";
            Statement statement = coneccion.createStatement();
            ResultSet result = statement.executeQuery(query);
            // verificar si hubo resultado
            while(result.next())
                // extraer la información del resultado
                dia_consulta = result.getString("dia"); 
            
            // evaluar el día y cambiar a su equivalente en español
            switch (dia_consulta.toLowerCase()) {
                case "sunday":
                    dia_consulta="domingo";
                    break;
                case "monday":
                    dia_consulta = "lunes";
                    break;
                case "tuesday":
                    dia_consulta = "martes";
                    break;
                case "wednesday":
                    dia_consulta = "miercoles";
                    break;
                case "thursday":
                    dia_consulta = "jueves";
                    break;
                case "friday":
                    dia_consulta = "viernes";
                    break;
                default:
                    dia_consulta = "sabado";
                    break;
            }
            // query para traer la información de los médicos disponibles en un momento específico
            query = "select m.id_medico, nombre, apellidos, especialidad from medicos m, especialidades e, trabaja t where m.id_especialidad=e.id_especialidad and m.id_medico=t.id_empleado and id_facilidad='"+id_facilidad+"' and curtime() > hora_entrada and curtime() <= date_sub(hora_salida,INTERVAL 30 MINUTE) and dia_trab like '%"+dia_consulta+"%' ";
            statement = coneccion.createStatement();
            result = statement.executeQuery(query);
            // variables para almacenar la información de los médicos
            String nombre = "", apellidos, especialidad, nombre_completo;
            // recorrer los resultados
            while(result.next())
            {
                // extraer la información del resultado
                id_medico.add(result.getString("m.id_medico"));
                nombre = result.getString("nombre");
                apellidos = result.getString("apellidos");
                especialidad = result.getString("especialidad");
                nombre_completo = nombre + " " + apellidos;
                // enviar la información a la tabla que muestra los médicos disponibles con su especialidad
                medicos.model.addRow(new Object[]{ nombre_completo, especialidad});
            }
            
            // evaluar si hay médicos disponibles
            if(!nombre.isEmpty())
            {// hay médicos disponibles
                // enviar los id de los médicos al próximo/nuevo GUI
                medicos.setId_Medico(id_medico);
                // hacer visible el nuevo GUI
                medicos.setVisible(true);
            }
            else
            {// no hay médicos disponibles
                JOptionPane.showMessageDialog(null, "No hay médicos disponibles en estos momentos.");
            }
            try{result.close();}catch(SQLException e){ /*blank intentionally*/}
            try{statement.close();}catch(SQLException e) {/*blank intentionally*/}
            
        }catch(SQLException e)
        {
            /*blank intentionally*/
         }
        finally
        {
            try
            {
                if(coneccion != null)
                    coneccion.close();
            } catch(SQLException e)
            {
                /*blank intentionally*/
            }
        }
    }//GEN-LAST:event_see_doctorsActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Search_Medical_Facility.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Search_Medical_Facility.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Search_Medical_Facility.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Search_Medical_Facility.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Search_Medical_Facility().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField cap_doc;
    private javax.swing.JTextField cap_est;
    protected javax.swing.JButton close;
    private javax.swing.JTextArea dir_fisica;
    private javax.swing.JTextField hora_apertura;
    private javax.swing.JTextField hora_cierre;
    private java.awt.Checkbox hospital;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JComboBox<String> nombre_facilidad;
    private javax.swing.JTextField num_tel;
    private java.awt.Checkbox oficina;
    private javax.swing.JTextArea planes_aceptados;
    private javax.swing.JButton see_doctors;
    private javax.swing.JButton see_inf;
    private javax.swing.JButton see_rating;
    protected javax.swing.JButton sendInfo;
    // End of variables declaration//GEN-END:variables

}
