import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.SpinnerNumberModel;

/** GUI utilizado para permitirle al paciente crear una reseña
 * de su última visita a una facilidad médica y del trato del 
 * médico hacia su persona.
 *
 * @author a-carrasquillo
 * @author arivesan
 */
public class Rating extends javax.swing.JFrame {
    // data fields
    private String id_paciente, id_facilidad, id_medico;
    // constantes relacionadas a la base de datos
    private final String YOURPASSWORD = "YourPassWord";
    private final String DBUSER = "dbuser";
    
    /**Constructor por defecto
     * Crea un nuevo formulario Rating
     */
    public Rating() {
        initComponents();
        this.setLocationRelativeTo(null);
        // crear instancias de la clase de modelos para los spinners
        SpinnerNumberModel spinnButton = new SpinnerNumberModel();
        SpinnerNumberModel spinnButton2 = new SpinnerNumberModel();
        // establecer el máximo y mínimo para el primer spinner
        spinnButton.setMaximum(10);
        spinnButton.setMinimum(0);
        // establecer el máximo y mínimo para el segundo spinner
        spinnButton2.setMaximum(10);
        spinnButton2.setMinimum(0);
        // asignar los modelos a los spinners
        rating_numerico_facilidad.setModel(spinnButton);
        rating_numerico_doctor.setModel(spinnButton2);
    }
    
    /**Constructor especial
     * 
     * @param id_paciente - número de identificación del paciente
     * @param id_facilidad - número de identificación de la facilidad
     * @param id_medico - número de identificación del médico
     */
    public Rating(String id_paciente, String id_facilidad, String id_medico) {
        initComponents();
        this.setLocationRelativeTo(null);
        // crear instancias de la clase de modelos para los spinners
        SpinnerNumberModel spinnButton = new SpinnerNumberModel();
        SpinnerNumberModel spinnButton2 = new SpinnerNumberModel();
        // establecer el máximo y mínimo para el primer spinner
        spinnButton.setMaximum(10);
        spinnButton.setMinimum(0);
        // establecer el máximo y mínimo para el segundo spinner
        spinnButton2.setMaximum(10);
        spinnButton2.setMinimum(0);
        // asignar los modelos a los spinners
        rating_numerico_facilidad.setModel(spinnButton);
        rating_numerico_doctor.setModel(spinnButton2);
        // asignar los argumentos a los data fields
        this.id_paciente = id_paciente;
        this.id_facilidad  = id_facilidad;
        this.id_medico = id_medico;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        opciones = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        facility_name = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        hospital_com = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        nombre_facilidad = new javax.swing.JLabel();
        rating_numerico_facilidad = new javax.swing.JSpinner();
        jLabel4 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        doctor_name = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        doctor_com = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        nombre_medico = new javax.swing.JLabel();
        rating_numerico_doctor = new javax.swing.JSpinner();
        jLabel5 = new javax.swing.JLabel();
        submit = new javax.swing.JButton();
        back = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Crear Reseña");

        opciones.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N

        facility_name.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        facility_name.setText("Nombre de la Facilidad: ");

        hospital_com.setColumns(20);
        hospital_com.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        hospital_com.setRows(5);
        jScrollPane1.setViewportView(hospital_com);

        jLabel2.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel2.setText("Calificación Numérica:");

        nombre_facilidad.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        nombre_facilidad.setText("Nombre");

        rating_numerico_facilidad.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        rating_numerico_facilidad.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                rating_numerico_facilidadStateChanged(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel4.setText("/10");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 797, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addComponent(rating_numerico_facilidad, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel4))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(facility_name)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(nombre_facilidad, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(facility_name)
                    .addComponent(nombre_facilidad))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 47, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(rating_numerico_facilidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(42, 42, 42))
        );

        opciones.addTab("Facilidad Médica", jPanel1);

        doctor_name.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        doctor_name.setText("Nombre del Doctor:");

        doctor_com.setColumns(20);
        doctor_com.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        doctor_com.setRows(5);
        jScrollPane3.setViewportView(doctor_com);

        jLabel3.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel3.setText("Calificación Numérica:");

        nombre_medico.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        nombre_medico.setText("Nombre");

        rating_numerico_doctor.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        rating_numerico_doctor.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                rating_numerico_doctorStateChanged(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel5.setText("/10");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 797, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(doctor_name)
                                .addGap(18, 18, 18)
                                .addComponent(nombre_medico, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(18, 18, 18)
                                .addComponent(rating_numerico_doctor, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel5)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(doctor_name)
                    .addComponent(nombre_medico))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(rating_numerico_doctor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addContainerGap(48, Short.MAX_VALUE))
        );

        opciones.addTab("Doctor", jPanel3);

        submit.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        submit.setText("Publicar");
        submit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitActionPerformed(evt);
            }
        });

        back.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        back.setText("Volver Atrás");
        back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(back)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(submit))
                    .addComponent(opciones, javax.swing.GroupLayout.PREFERRED_SIZE, 822, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(30, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(opciones, javax.swing.GroupLayout.PREFERRED_SIZE, 429, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(submit)
                    .addComponent(back))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        opciones.getAccessibleContext().setAccessibleName("opciones");
        opciones.getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void submitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitActionPerformed
        // recuperar la información de los campos
        String comentarioDoctor = doctor_com.getText();
        String ratingNumMedico = rating_numerico_doctor.getValue().toString();
        String comentarioFacilidad = hospital_com.getText();
        String ratingNumFacilidad = rating_numerico_facilidad.getValue().toString();
        
        // verificar si dejó los comentarios en blanco
        if(comentarioDoctor.isEmpty()||comentarioFacilidad.isEmpty())
        {
            JOptionPane.showMessageDialog(null,"¡Favor de no dejar los comentarios en blanco!");
        }
        else
        {
            Connection coneccion = null;
            PreparedStatement p_statement = null;
            PreparedStatement p_statement2 = null;
            
            try
            {
                coneccion = DriverManager.getConnection("jdbc:mysql://localhost:3306/MedExpress?autoReconnect=true&useSSL=false",DBUSER,YOURPASSWORD); 
                // query para almacenar la reseña del médico
                String query = "insert into comentarios values(0,'"+id_paciente+"',curdate(),curtime(),'"+id_medico+"','"+comentarioDoctor+"', "+ratingNumMedico+")";
                // query para almacenar la reseña de la facilidad médica
                String query2 = "insert into comentarios values(0,'"+id_paciente+"',curdate(),curtime(),'"+id_facilidad+"','"+comentarioFacilidad+"', "+ratingNumFacilidad+")";   
                p_statement = coneccion.prepareStatement(query);
                p_statement2 = coneccion.prepareStatement(query2);
                
                // realizar ambas inserciones
                if(p_statement.executeUpdate()>=0&&p_statement2.executeUpdate()>=0)
                {
                    JOptionPane.showMessageDialog(null, "Ambas reseñas han sido publicadas.");
                    // crear instancia del menú principal de los pacientes
                    PatientUserForm paciente = new PatientUserForm(id_paciente); 
                    // cerrar el GUI actual
                    this.dispose();
                    // hacer visible el GUI nuevo
                    paciente.setVisible(true);
                }
                try{p_statement.close();}catch(SQLException e) {/*blank intentionally*/}
                try{p_statement2.close();}catch(SQLException e) {/*blank intentionally*/}
            }catch(SQLException e)
            {
                /*blank intentionally*/
            }
            finally
            {
                try
                {
                    if(p_statement != null)
                        p_statement.close();
                    if(p_statement2 != null)
                        p_statement2.close();
                    if(coneccion != null)
                        coneccion.close();
                } catch(SQLException e) 
                {
                    /*blank intentionally*/
                }
            }
        }
    }//GEN-LAST:event_submitActionPerformed

    private void rating_numerico_facilidadStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_rating_numerico_facilidadStateChanged
        // extraer la valoración númerica que se le dio a la facilidad médica
        byte valor = Byte.parseByte(this.rating_numerico_facilidad.getValue().toString());
        // evaluar que el valor númerico esté en [0,10]
        if(valor < 0 || valor > 10)
        {// se encontró un error
            // asignar el 0 como el valor del campo
            rating_numerico_facilidad.setValue(0);
            // mensaje notificando el error
            JOptionPane.showMessageDialog(null, "El valor máximo es 10 y el mínimo es 0");
        }
    }//GEN-LAST:event_rating_numerico_facilidadStateChanged

    private void rating_numerico_doctorStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_rating_numerico_doctorStateChanged
        // extraer la valoración númerica que se le dio al médico
        byte valor = Byte.parseByte(this.rating_numerico_doctor.getValue().toString());
        // evaluar que el valor númerico esté en [0,10]
        if(valor < 0 || valor > 10)
        {// se encontró un error
            // asignar el 0 como el valor del campo
            rating_numerico_doctor.setValue(0);
            // mensaje notificando el error
            JOptionPane.showMessageDialog(null, "El valor máximo es 10 y el mínimo es 0");
        }
    }//GEN-LAST:event_rating_numerico_doctorStateChanged

    private void backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backActionPerformed
        // cerrar el GUI actual
        this.dispose();
        // crear instancia del menú principal de los pacientes
        PatientUserForm paciente = new PatientUserForm(id_paciente);
        // hacer visible el nuevo GUI
        paciente.setVisible(true);
    }//GEN-LAST:event_backActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Rating.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Rating.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Rating.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Rating.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Rating().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton back;
    private javax.swing.JTextArea doctor_com;
    protected javax.swing.JLabel doctor_name;
    protected javax.swing.JLabel facility_name;
    private javax.swing.JTextArea hospital_com;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    protected javax.swing.JLabel nombre_facilidad;
    protected javax.swing.JLabel nombre_medico;
    private javax.swing.JTabbedPane opciones;
    private javax.swing.JSpinner rating_numerico_doctor;
    private javax.swing.JSpinner rating_numerico_facilidad;
    private javax.swing.JButton submit;
    // End of variables declaration//GEN-END:variables
}
