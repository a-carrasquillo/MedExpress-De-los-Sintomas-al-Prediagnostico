import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.*;
import javax.swing.table.DefaultTableModel;

/**GUI que nos permite ver una lista con la información general del historial médico de un paciente
 *
 * @author a-carrasquillo
 * @author arivesan
 */
public class Historial_Medico extends javax.swing.JFrame {
    // data fields
    protected DefaultTableModel model;
    private String id_Med;
    private List<String> id_historial_medico;
    private String id_paciente = "";
    // constantes relacionadas a la base de datos
    private final String YOURPASSWORD = "YourPassWord";
    private final String DBUSER = "dbuser";
    
    /**Constructor por defecto
     * Crea un nuevo formulario Historial_Medico
     */
    public Historial_Medico() {
        initComponents();
        this.setLocationRelativeTo(null);
        // nos permite designar el tipo de modelo de la tabla
        model = new DefaultTableModel();
        // asigna el modelo a la lista de historial médico
        medical_history_list.setModel(model);
        // añade las columnas a la tabla
        model.addColumn("Fecha de Consulta");
        model.addColumn("Resultado Examen Físico");
        model.addColumn("Problema Actual");
        // elimina el mensaje de error por defecto
        error.setText("");
    }
    
    /**Constructor especial
     * 
     * @param id_Med - número de identificación del médico
     * @param id_paciente  - número de identificación del paciente
     */
    public Historial_Medico(String id_Med, String id_paciente) {
        initComponents();
        this.setLocationRelativeTo(null);
        this.id_Med = id_Med;
        this.id_paciente = id_paciente;
        // nos permite designar el tipo de modelo de la tabla
        model = new DefaultTableModel();
        // asigna el modelo a la lista de historial médico
        medical_history_list.setModel(model);
        // añade las columnas a la tabla
        model.addColumn("Fecha de Consulta");
        model.addColumn("Resultado Examen Físico");
        model.addColumn("Problema Actual");
        // elimina el mensaje de error por defecto
        error.setText("");
    }
    
   /**Método que nos permite modificar la lista con los números de identificación del historial
    * 
    * @param id_historial_medico - lista con los números de identificación de las entradas del historial médico
    */
    public void setId_Historial_Medico(List<String> id_historial_medico)
    {
        this.id_historial_medico = id_historial_medico;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        medical_history_list = new javax.swing.JTable();
        see_more_details = new javax.swing.JButton();
        error = new javax.swing.JLabel();
        back = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Historial Médico");

        medical_history_list.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        medical_history_list.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Fecha de Consulta", "Resultado Examen Físico", "Problema Actual"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        medical_history_list.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jScrollPane1.setViewportView(medical_history_list);

        see_more_details.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        see_more_details.setText("Ver Más Detalles");
        see_more_details.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                see_more_detailsActionPerformed(evt);
            }
        });

        error.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        error.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        error.setText("Mensaje de Error");

        back.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        back.setText("Volver Atrás");
        back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(back, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(34, 34, 34)
                        .addComponent(error, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                        .addComponent(see_more_details))
                    .addComponent(jScrollPane1))
                .addGap(19, 19, 19))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(see_more_details)
                    .addComponent(back)
                    .addComponent(error, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void see_more_detailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_see_more_detailsActionPerformed
        // extraer el índice de la fila seleccionada de la tabla
        int fila = medical_history_list.getSelectedRow();
        // verificar si se escogió una fila
        if (fila<0)
        {
            error.setText("Por favor escoger una fila.");
        }
        else
        { 
            Connection coneccion = null; 
            try
            {
                coneccion = DriverManager.getConnection("jdbc:mysql://localhost:3306/MedExpress?autoReconnect=true&useSSL=false",DBUSER,YOURPASSWORD);
                // query para recuperar la información del historial médico basado en el id de entrada
                String query = "select Fec_Consulta, Estatura, Peso, Alergias, Resultado_Exam_Fis, Problema_Actual, Cond_Salud from historial_medico where ID_Hist_Med="+ id_historial_medico.get(fila);
                Statement statement = coneccion.createStatement();
                ResultSet result = statement.executeQuery(query);

                // crear una instancia del GUI que nos permite ver la información detallada de una entrada del historial médico
                See_Medical_History ver_historial_detallado = new  See_Medical_History();
                // verificar si hubo resultados
                while(result.next())
                {
                    // extraer la información del resultado
                    String fecha_consulta = result.getString("Fec_Consulta");
                    String estatura = result.getString("Estatura");
                    String peso = result.getString("Peso");
                    String alergias = result.getString("Alergias");
                    String resultado_examen_fisico = result.getString("Resultado_Exam_Fis");
                    String problema_actual = result.getString("Problema_Actual");
                    String condiciones_salud = result.getString("Cond_Salud");
                    // enviar la información al GUI que nos muestra la información detallada
                    ver_historial_detallado.fecha.setText(fecha_consulta);
                    ver_historial_detallado.estatura.setText(estatura);
                    ver_historial_detallado.peso.setText(peso);
                    ver_historial_detallado.alergias.setText(alergias);
                    ver_historial_detallado.resultado_ExFisico.setText(resultado_examen_fisico);
                    ver_historial_detallado.problema.setText(problema_actual);
                    ver_historial_detallado.condicion_salud.setText(condiciones_salud);
                }
                // hacer visible el nuevo GUI
                ver_historial_detallado.setVisible(true);
                try{result.close();}catch(SQLException e){ /*blank intentionally*/}
                try{statement.close();}catch(SQLException e) {/*blank intentionally*/}
            }catch(SQLException e)
            {
                /*blank intentionally*/
            }
            finally
            {
                try
                {
                    if(coneccion != null)
                        coneccion.close();
                } catch(SQLException e)
                {
                    /*blank intentionally*/
                }
            }
        } 
    }//GEN-LAST:event_see_more_detailsActionPerformed

    private void backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backActionPerformed
        // cerrar el GUI actual
        this.dispose();
        // instanciar el menú principal de los médicos
        DoctorUserForm doctor = new DoctorUserForm(id_Med, id_paciente);
        // hacer visible el nuevo GUI
        doctor.setVisible(true);
    }//GEN-LAST:event_backActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Ingresos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Ingresos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Ingresos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Ingresos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Historial_Medico().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton back;
    private javax.swing.JLabel error;
    private javax.swing.JScrollPane jScrollPane1;
    protected javax.swing.JTable medical_history_list;
    private javax.swing.JButton see_more_details;
    // End of variables declaration//GEN-END:variables
}
