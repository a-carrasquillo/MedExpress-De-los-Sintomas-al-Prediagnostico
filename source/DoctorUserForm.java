import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.*;

/**GUI utilizado para mostrar las opciones que tiene un médico
 *
 * @author a-carrasquillo
 * @author arivesan
 */
public class DoctorUserForm extends javax.swing.JFrame {
    //data field
    private String id_medico;
    private String id_paciente;
    private List<String> id_historial_medico;
    // constantes relacionadas a la base de datos
    private final String YourPassWord = "YourPassWord";
    private final String DBUSER = "dbuser"; 
    
    /** Constructor por defecto
     * Crea un nuevo formulario DoctorUserForm
     */
    public DoctorUserForm() {
        initComponents();
        this.setLocationRelativeTo(null);
    }
    
    /**Constructor especial 1
     * 
     * @param id_medico - número de identificación del médico
     */
     public DoctorUserForm(String id_medico) {
        initComponents();
        this.setLocationRelativeTo(null);
        this.id_medico = id_medico;
    }
     
     /**Constructor especial 2
      * 
      * @param id_medico - número de identificación del médico
      * @param id_paciente - número de identificación del paciente
      */
     public DoctorUserForm(String id_medico, String id_paciente) {
        initComponents();
        this.setLocationRelativeTo(null);
        this.id_medico = id_medico;
        this.id_paciente=id_paciente;
    }
      
    /**Método que nos permite recuperar el id del médico
     * 
     * @return cadena de caracteres que representa el id del médico
     */
    public String getIdMedico()
    {
        return id_medico;
    }
    
    /**Método que nos permite modificar el id del médico
     * 
     * @param id_medico - número de identificación del médico
     */
    public void setIdMedico(String id_medico)
    {
        this.id_medico = id_medico;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ver_historial = new javax.swing.JButton();
        sign_out = new javax.swing.JButton();
        create_medical_history = new javax.swing.JButton();
        ver_pacientes = new javax.swing.JButton();
        welcome = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Página Principal");

        ver_historial.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        ver_historial.setText("Ver Historial Clínico del Paciente");
        ver_historial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ver_historialActionPerformed(evt);
            }
        });

        sign_out.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        sign_out.setText("Cerrar Sesión");
        sign_out.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sign_outActionPerformed(evt);
            }
        });

        create_medical_history.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        create_medical_history.setText("Crear Entrada al Historial Médico del Paciente");
        create_medical_history.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                create_medical_historyActionPerformed(evt);
            }
        });

        ver_pacientes.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        ver_pacientes.setText("Lista de Ingreso de Pacientes");
        ver_pacientes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ver_pacientesActionPerformed(evt);
            }
        });

        welcome.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        welcome.setText("¿Qué desea hacer 'Nombre Doctor'?");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(sign_out)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(create_medical_history)
                                .addComponent(ver_pacientes, javax.swing.GroupLayout.PREFERRED_SIZE, 367, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(ver_historial, javax.swing.GroupLayout.PREFERRED_SIZE, 367, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addComponent(welcome)))
                .addContainerGap(40, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(welcome)
                .addGap(18, 18, 18)
                .addComponent(ver_pacientes)
                .addGap(18, 18, 18)
                .addComponent(create_medical_history)
                .addGap(18, 18, 18)
                .addComponent(ver_historial)
                .addGap(18, 18, 18)
                .addComponent(sign_out)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void create_medical_historyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_create_medical_historyActionPerformed
        // cerrar el GUI actual
        this.dispose();
        // crea una instancia del GUI que nos permite realizar una entrada al historial médico del paciente
        Create_Medical_History historial = new Create_Medical_History(id_medico,id_paciente);
        // hacer visible el nuevo GUI
        historial.setVisible(true);
    }//GEN-LAST:event_create_medical_historyActionPerformed

    private void sign_outActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sign_outActionPerformed
        // cerrar el GUI actual
        this.dispose();
        // crea una instancia de la página de login principal
        Login_As log = new Login_As();
        // hacer visible el nuevo GUI
        log.setVisible(true);
    }//GEN-LAST:event_sign_outActionPerformed

    private void ver_historialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ver_historialActionPerformed
        // crea una instancia del GUI que nos permite ver el historial médico de un paciente
        Historial_Medico historial = new Historial_Medico(id_medico, id_paciente);
        // crea una instancia del ArrayList para almacenar los números de identificación de los historiales médicos
        id_historial_medico = new ArrayList<>();
        
        Connection coneccion = null;
        try
        {
            coneccion = DriverManager.getConnection("jdbc:mysql://localhost:3306/MedExpress?autoReconnect=true&useSSL=false",DBUSER,YourPassWord);
            // buscar el historial médico basado en el paciente y el médico que solicita el historial
            String query = "select ID_Hist_Med, Fec_Consulta, Resultado_Exam_Fis, Problema_Actual from MedExpress.historial_medico where ID_Paciente ='" + id_paciente +"' and ID_Medico = '"+id_medico+"' order by Fec_Consulta";
            Statement statement = coneccion.createStatement();
            ResultSet result = statement.executeQuery(query);

            // variables para almacenar la información del historial médico
            String fecha_consulta, resultado_examen_fisico, problema_actual;
            
            // extraer los resultados
            while(result.next())
            {
                id_historial_medico.add(result.getString("ID_Hist_Med"));
                fecha_consulta = result.getString("Fec_Consulta");
                resultado_examen_fisico = result.getString("Resultado_Exam_Fis");
                problema_actual = result.getString("Problema_Actual");
                //enviar la información a la tabla
                historial.model.addRow(new Object[]{ fecha_consulta, resultado_examen_fisico, problema_actual});
            }
            // cerrar el GUI actual
            this.dispose();
            // enviar la lista de ids de historial médico al nuevo GUI
            historial.setId_Historial_Medico(id_historial_medico);
            // hacer visible el nuevo GUI
            historial.setVisible(true);
            
            try{result.close();}catch(SQLException e){ /*blank intentionally*/}
            try{statement.close();}catch(SQLException e) {/*blank intentionally*/}
            
        }catch(SQLException e)
        {
            /*blank intentionally*/
         }
        finally
        {
            try{
                if(coneccion != null)
                    coneccion.close();
            } catch(SQLException e)
            {
                /*blank intentionally*/
            }
        }
    }//GEN-LAST:event_ver_historialActionPerformed

    private void ver_pacientesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ver_pacientesActionPerformed
        // cerrar el GUI actual
        this.dispose();
        // crea una instancia del GUI que nos permite ver una lista de ingresos de pacientes
        Ingresos ingreso = new Ingresos(id_medico);
        // hacer visible el nuevo GUI
        ingreso.setVisible(true);
    }//GEN-LAST:event_ver_pacientesActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DoctorUserForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DoctorUserForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DoctorUserForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DoctorUserForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DoctorUserForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton create_medical_history;
    private javax.swing.JButton sign_out;
    private javax.swing.JButton ver_historial;
    private javax.swing.JButton ver_pacientes;
    protected javax.swing.JLabel welcome;
    // End of variables declaration//GEN-END:variables
}
