import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JOptionPane;
import java.util.ArrayList;
import java.util.List;

/**GUI que permite crear una cuenta de tipo administrador
 *
 * @author a-carrasquillo
 */
public class Create_Account_Adm extends javax.swing.JFrame {
    // data fields
    private List<String> id_fac;
    // constantes relacionadas a la base de datos
    private final String YOURPASSWORD = "YourPassWord";
    private final String DBUSER = "dbuser";
    
    /** Constructor por defecto
     * Crea un nuevo formulario Create_Account_Adm
     */
    public Create_Account_Adm() {
        initComponents();
        this.setLocationRelativeTo(null);
        // elimina el mensaje de error por defecto
        error.setText("");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        name = new java.awt.TextField();
        apellidos = new java.awt.TextField();
        pass = new javax.swing.JPasswordField();
        pass_conf = new javax.swing.JPasswordField();
        id_empleado = new java.awt.TextField();
        get_id_adm = new java.awt.Button();
        hora_entrada = new javax.swing.JComboBox<>();
        hora_salida = new javax.swing.JComboBox<>();
        domingo = new java.awt.Checkbox();
        lunes = new java.awt.Checkbox();
        martes = new java.awt.Checkbox();
        miercoles = new java.awt.Checkbox();
        jueves = new java.awt.Checkbox();
        viernes = new java.awt.Checkbox();
        sabado = new java.awt.Checkbox();
        submit = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        hospital = new java.awt.Checkbox();
        oficina = new java.awt.Checkbox();
        nombre_facilidad = new javax.swing.JComboBox<>();
        error = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Registro de Administrador");

        jLabel1.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel1.setText("Nombre:");

        jLabel2.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel2.setText("Apellidos:");

        jLabel3.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel3.setText("Contraseña:");

        jLabel4.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel4.setText("Confirmar Contraseña:");

        jLabel5.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel5.setText("ID Empleado:");

        jLabel6.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel6.setText("Nombre Facilidad:");

        jLabel7.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel7.setText("Hora de Entrada:");

        jLabel8.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel8.setText("Hora de Salida:");

        jLabel9.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel9.setText("Días de Trabajo:");

        name.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N

        apellidos.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N

        pass.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N

        pass_conf.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N

        id_empleado.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N

        get_id_adm.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        get_id_adm.setLabel("Obtener ID");
        get_id_adm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                get_id_admActionPerformed(evt);
            }
        });

        hora_entrada.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        hora_entrada.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        hora_entrada.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                hora_entradaMouseClicked(evt);
            }
        });

        hora_salida.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        hora_salida.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        domingo.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        domingo.setLabel("Domingo");

        lunes.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        lunes.setLabel("Lunes");

        martes.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        martes.setLabel("Martes");

        miercoles.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        miercoles.setLabel("Miércoles");

        jueves.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jueves.setLabel("Jueves");

        viernes.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        viernes.setLabel("Viernes");

        sabado.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        sabado.setLabel("Sábado");

        submit.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        submit.setText("Registrarse");
        submit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitActionPerformed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel11.setText("Tipo de Facilidad:");

        hospital.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        hospital.setLabel("Hospital");
        hospital.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                hospitalMouseClicked(evt);
            }
        });

        oficina.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        oficina.setLabel("Oficina Médica");
        oficina.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                oficinaMouseClicked(evt);
            }
        });

        nombre_facilidad.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        nombre_facilidad.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione un Tipo de Facilidad Primero" }));

        error.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        error.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        error.setText("Mensaje de Error");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addComponent(jLabel11)
                            .addComponent(jLabel6)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(submit, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(hora_salida, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(nombre_facilidad, 0, 330, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(hospital, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(oficina, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(id_empleado, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(get_id_adm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(apellidos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(name, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(pass)
                            .addComponent(pass_conf)
                            .addComponent(hora_entrada, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(domingo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(miercoles, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(sabado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(37, 37, 37)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jueves, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(viernes, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lunes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(martes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGap(35, 35, 35))))
            .addComponent(error, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(apellidos, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pass_conf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(get_id_adm, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(4, 4, 4))
                    .addComponent(id_empleado, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(hospital, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11)
                    .addComponent(oficina, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(nombre_facilidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hora_entrada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hora_salida, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9)
                    .addComponent(domingo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lunes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(martes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(miercoles, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jueves, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(viernes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sabado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(submit)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(error, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel1.getAccessibleContext().setAccessibleName("nombre_label");
        apellidos.getAccessibleContext().setAccessibleName("apellidos");
        pass.getAccessibleContext().setAccessibleName("pwd");
        pass_conf.getAccessibleContext().setAccessibleName("pwd_conf");
        id_empleado.getAccessibleContext().setAccessibleName("ID_Empleado");
        get_id_adm.getAccessibleContext().setAccessibleName("get_id");
        hora_entrada.getAccessibleContext().setAccessibleName("hora_entrada");
        domingo.getAccessibleContext().setAccessibleName("domingo");
        lunes.getAccessibleContext().setAccessibleName("lunes");
        martes.getAccessibleContext().setAccessibleName("martes");
        martes.getAccessibleContext().setAccessibleDescription("");
        miercoles.getAccessibleContext().setAccessibleName("miercoles");
        jueves.getAccessibleContext().setAccessibleName("jueves");
        viernes.getAccessibleContext().setAccessibleName("viernes");
        sabado.getAccessibleContext().setAccessibleName("sabado");
        submit.getAccessibleContext().setAccessibleName("submit");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void submitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitActionPerformed
        // elimina el mensaje de error
        error.setText("");
        
        // recuperar los valores de los campos
        String nombre = name.getText();
        String apellido = apellidos.getText();
        String password = String.valueOf(pass.getPassword());
        String conf_password = String.valueOf(pass_conf.getPassword());
        String id = id_empleado.getText();
        String entrada = String.valueOf(hora_entrada.getSelectedItem());
        String salida = String.valueOf(hora_salida.getSelectedItem());
        
        // variable para almacenar los días de trabajo
        String dias_trabajo = "";
        // verificar los días escogidos
        if(domingo.getState())
            dias_trabajo = "Domingo";
        if(lunes.getState()&&dias_trabajo.isEmpty())
            dias_trabajo = dias_trabajo + "Lunes";
        else if(lunes.getState()&&!dias_trabajo.isEmpty())
            dias_trabajo = dias_trabajo + ", Lunes";
        if(martes.getState()&&dias_trabajo.isEmpty())
            dias_trabajo = dias_trabajo + "Martes";
        else if(martes.getState()&&!dias_trabajo.isEmpty())
            dias_trabajo = dias_trabajo + ", Martes";
        if(miercoles.getState()&&dias_trabajo.isEmpty())
            dias_trabajo = dias_trabajo + "Miercoles";
        else if(miercoles.getState()&&!dias_trabajo.isEmpty())
            dias_trabajo = dias_trabajo + ", Miercoles";
        if(jueves.getState()&&dias_trabajo.isEmpty())
            dias_trabajo = dias_trabajo + "Jueves";
        else if(jueves.getState()&&!dias_trabajo.isEmpty())
             dias_trabajo = dias_trabajo + ", Jueves";
        if(viernes.getState()&&dias_trabajo.isEmpty())
            dias_trabajo = dias_trabajo + "Viernes";
        else if(viernes.getState()&&!dias_trabajo.isEmpty())
            dias_trabajo = dias_trabajo + ", Viernes";
        if(sabado.getState()&&dias_trabajo.isEmpty())
            dias_trabajo = dias_trabajo + "Sabado";
        else if(sabado.getState()&&!dias_trabajo.isEmpty())
            dias_trabajo = dias_trabajo + ", Sabado";
        
        // verificar que las contraseñas sean iguales y no están vacías
        if (!password.isEmpty()&&password.equals(conf_password))
        {
            // verificar que no deje nada en blanco
            if(nombre.isEmpty()||apellido.isEmpty()|| id.isEmpty()||entrada.isEmpty()||salida.isEmpty()||dias_trabajo.isEmpty())
            {
                error.setText("Favor de no dejar encasillados en blanco!");
            }
            else
            {
                Connection coneccion = null;
                Connection c2 = null;
                PreparedStatement p_statement = null;
                PreparedStatement p_statement2=null;
                try
                {
                    coneccion = DriverManager.getConnection("jdbc:mysql://localhost:3306/MedExpress?autoReconnect=true&useSSL=false",DBUSER,YOURPASSWORD);
                    // query de inserción en la tabla de los administradores de facilidades médicas
                    String query = "insert into adm_fac_med values('"+id+"', '"+password+ "', '" + nombre + "', '"+ apellido+"')";
                    p_statement = coneccion.prepareStatement(query);
                    
                    c2 = DriverManager.getConnection("jdbc:mysql://localhost:3306/MedExpress?autoReconnect=true&useSSL=false",DBUSER,YOURPASSWORD);
                    // query de inserción en la tabla de trabaja
                    String query2 = "insert into trabaja values('"+id+"', '"+id_fac.get(nombre_facilidad.getSelectedIndex())+"', '"+entrada+"', '"+salida+"', '"+dias_trabajo+"' )";
                    p_statement2 = c2.prepareStatement(query2);
                    
                    // realizar las inserciones
                    if((p_statement.executeUpdate()>=0) &&(p_statement2.executeUpdate()>=0))
                    {
                        JOptionPane.showMessageDialog(null, "Información Transferida Correctamente.");
                        JOptionPane.showMessageDialog(null, "Inicie sesión para tener acceso.");
                        // cerrar el GUI actual
                        dispose();
                        // crear una instancia del GUI de inicio de sesión de los administradores
                        LogAdmin login= new  LogAdmin();
                        // hacer visible el GUI nuevo
                        login.setVisible(true);
                    }  
                }catch(SQLException e)
                {
                    /*blank intentionally*/
                 }
                finally
                {
                    try{
                        if(p_statement != null)
                            p_statement.close();
                        
                        if(coneccion != null)
                            coneccion.close();
                        
                        if(p_statement2 != null)
                            p_statement2.close();
                        
                        if(c2 != null)
                            c2.close();
                    } catch(SQLException e) {
                        /*blank intentionally*/
                    }
                }
            }
        }
        else 
            error.setText("Las contraseñas no coinciden!");
    }//GEN-LAST:event_submitActionPerformed

    private void hospitalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_hospitalMouseClicked
        // eliminar los objetos en los horarios de entrada y salida
        hora_entrada.removeAllItems();
        hora_salida.removeAllItems();
        
        // al marcar el encasillado de hospital, si el encasillado de oficina esta seleccionado
        // se desmarcará automáticamente
        if(oficina.getState())
            oficina.setState(false);
        
        // variable para guardar la hora con su formato establecido
        String hora;

        // llenar los encasillados de hora de entrada y hora de salida con las horas
        for (int i = 1; i <= 24; i++)
        {
            hora = i + ":00:00";
            hora_entrada.addItem(hora);
            hora_salida.addItem(hora);
        }
        
        // remover todos los nombres de las facilidades
        nombre_facilidad.removeAllItems();
        // crear nueva instancia del ArrayList para almacenar los números de identificación de las facilidades
        id_fac = new ArrayList<>();
        
        Connection coneccion = null;
        try
        {
            coneccion = DriverManager.getConnection("jdbc:mysql://localhost:3306/MedExpress?autoReconnect=true&useSSL=false",DBUSER,YOURPASSWORD);
            // query para traer los nombres y los números de identificación de los hospitales
            String query = "select Nombre, ID_Facilidad from MedExpress.Hospitales";
            Statement statement = coneccion.createStatement();
            ResultSet result = statement.executeQuery(query);
            // extraer los resultados
            while(result.next())
            {
                nombre_facilidad.addItem(result.getString(1));
                id_fac.add(result.getString(2));
            }
                   
            try{result.close();}catch(SQLException e){ /*blank intentionally*/}
            try{statement.close();}catch(SQLException e) {/*blank intentionally*/}

        }catch(SQLException e)
        {
            /*blank intentionally*/
         }
         finally
         {
             try{
                 if(coneccion != null)
                     coneccion.close();
             } catch(SQLException e)
             {
                 /*blank intentionally*/
             }
         }       
    }//GEN-LAST:event_hospitalMouseClicked

    private void oficinaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_oficinaMouseClicked
        // eliminar los objetos en los horarios de entrada y salida
        hora_entrada.removeAllItems();
        hora_salida.removeAllItems();
        
        // al marcar el encasillado de oficina, si el encasillado de hospital esta seleccionado
        // se desmarcará automáticamente
        if(hospital.getState())
            hospital.setState(false);
        
        // variable para guardar la hora con su formato establecido
        String hora;

        // llenar los encasillados de hora de entrada y hora de salida con las horas
        for (int i = 8; i<=17;i++)
        {
            hora = i + ":00:00";
            hora_entrada.addItem(hora);
            hora_salida.addItem(hora);
        }
        
        // remover todos los nombres de las facilidades
        nombre_facilidad.removeAllItems();
        // crear nueva instancia del ArrayList para almacenar los números de identificación de las facilidades
        id_fac = new ArrayList<>();
        
        Connection coneccion = null;
        try
        {
            coneccion = DriverManager.getConnection("jdbc:mysql://localhost:3306/MedExpress?autoReconnect=true&useSSL=false",DBUSER,YOURPASSWORD);
            // query para traer los nombres y los números de identificación de las oficinas médicas
            String query = "select Nombre, ID_Facilidad from MedExpress.Oficinas_Medicas";
            Statement statement = coneccion.createStatement();
            ResultSet result = statement.executeQuery(query);
            // extraer los resultados
           while(result.next())
           {
               nombre_facilidad.addItem(result.getString(1));
               id_fac.add(result.getString(2));
           }
                   
           try{result.close();}catch(SQLException e){ /*blank intentionally*/}
           try{statement.close();}catch(SQLException e) {/*blank intentionally*/}

        }catch(SQLException e)
        {
            /*blank intentionally*/
         }
         finally
         {
             try{
                 if(coneccion != null)
                     coneccion.close();
             } catch(SQLException e)
             {
                /*blank intentionally*/
             }
          }

    }//GEN-LAST:event_oficinaMouseClicked

    private void hora_entradaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_hora_entradaMouseClicked
        // determinar la hora que se seleccionó como hora de entrada
        String hora = String.valueOf(hora_entrada.getSelectedItem());
        // remover la hora de entrada de la hora de salida
        hora_salida.removeItem(hora);
    }//GEN-LAST:event_hora_entradaMouseClicked

    private void get_id_admActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_get_id_admActionPerformed
        // Primero definimos la variable entera para almacenar el número de identificación.
        int id_e;
        // Ahora podemos realizar el generador aleatorio
        id_e = (int)(Math.random()*((999-002)+1))+002;
        // Por último, pasaremos el valor del id generado al encasillado designado para ese propósito
        id_empleado.setText("A-"+String.valueOf(id_e));
    }//GEN-LAST:event_get_id_admActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Create_Account_Adm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Create_Account_Adm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Create_Account_Adm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Create_Account_Adm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Create_Account_Adm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.TextField apellidos;
    private java.awt.Checkbox domingo;
    private javax.swing.JLabel error;
    private java.awt.Button get_id_adm;
    private javax.swing.JComboBox<String> hora_entrada;
    private javax.swing.JComboBox<String> hora_salida;
    private java.awt.Checkbox hospital;
    private java.awt.TextField id_empleado;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private java.awt.Checkbox jueves;
    private java.awt.Checkbox lunes;
    private java.awt.Checkbox martes;
    private java.awt.Checkbox miercoles;
    private java.awt.TextField name;
    private javax.swing.JComboBox<String> nombre_facilidad;
    private java.awt.Checkbox oficina;
    private javax.swing.JPasswordField pass;
    private javax.swing.JPasswordField pass_conf;
    private java.awt.Checkbox sabado;
    private javax.swing.JButton submit;
    private java.awt.Checkbox viernes;
    // End of variables declaration//GEN-END:variables
}
